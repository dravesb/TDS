return(list(U, V))
}
#determine embedding dimension d
plot(svd(yn)$d)
#let's try d = 5
d <- 5
#set initial values to average greyscale values
U <- matrix(sqrt(mean(yn)/d), nrow = nrow(yn), ncol = d)
V <- matrix(sqrt(mean(yn)/d), nrow = ncol(yn), ncol = d)
res <- pmf(yn_corrupt, U, V)
U
V
#initialize variables
d <- ncol(U)
sigma2 <- 1
sigma2_u <- 100
sigma2_v <- 100
I <- matrix(1, ncol = ncol(X), nrow = nrow(X))
I[which(is.na(X), arr.ind = TRUE)] <- 0
max.iters <- 10000
Xhat <- tcrossprod(U, V)
#convergence criterion
iter <- 1
conv.crit <- FALSE
while(!conv.crit){
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V); hist(Xhat.new, main = paste("Iter:", iter))
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
#initialize variables
d <- ncol(U)
sigma2 <- 1
sigma2_u <- 100
sigma2_v <- 100
I <- matrix(1, ncol = ncol(X), nrow = nrow(X))
I[which(is.na(X), arr.ind = TRUE)] <- 0
max.iters <- 10000
Xhat <- tcrossprod(U, V)
#convergence criterion
iter <- 1
conv.crit <- FALSE
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V); hist(Xhat.new, main = paste("Iter:", iter))
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
U
eta
eta <- 1e-4
eta <- 1e-3
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V); hist(Xhat.new, main = paste("Iter:", iter))
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
U
#initialize variables
d <- ncol(U)
sigma2 <- 1
sigma2_u <- 100
sigma2_v <- 100
I <- matrix(1, ncol = ncol(X), nrow = nrow(X))
I[which(is.na(X), arr.ind = TRUE)] <- 0
max.iters <- 10000
Xhat <- tcrossprod(U, V)
#convergence criterion
iter <- 1
conv.crit <- FALSE
while(!conv.crit){
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V); hist(Xhat.new, main = paste("Iter:", iter))
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#initialize variables
d <- ncol(U)
sigma2 <- 1
sigma2_u <- 100
sigma2_v <- 100
I <- matrix(1, ncol = ncol(X), nrow = nrow(X))
I[which(is.na(X), arr.ind = TRUE)] <- 0
max.iters <- 10000
Xhat <- tcrossprod(U, V)
#convergence criterion
iter <- 1
conv.crit <- FALSE
#let's try d = 5
d <- 5
#set initial values to average greyscale values
U <- matrix(sqrt(mean(yn)/d), nrow = nrow(yn), ncol = d)
V <- matrix(sqrt(mean(yn)/d), nrow = ncol(yn), ncol = d)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V); hist(Xhat.new, main = paste("Iter:", iter))
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
eta <- 1e-5
#let's try d = 5
d <- 5
#set initial values to average greyscale values
U <- matrix(sqrt(mean(yn)/d), nrow = nrow(yn), ncol = d)
V <- matrix(sqrt(mean(yn)/d), nrow = ncol(yn), ncol = d)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V); hist(Xhat.new, main = paste("Iter:", iter))
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
U
V
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V); hist(Xhat.new, main = paste("Iter:", iter))
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
U
hist(U)
hist(V)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V); hist(Xhat.new, main = paste("Iter:", iter))
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
hist(Y)
hist(U)
hist(V)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); ; hist(U, main = "U")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#let's try d = 5
d <- 5
#set initial values to average greyscale values
U <- matrix(sqrt(mean(yn)/d), nrow = nrow(yn), ncol = d)
V <- matrix(sqrt(mean(yn)/d), nrow = ncol(yn), ncol = d)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
V <- matrix(sqrt(mean(yn)/d), nrow = ncol(yn), ncol = d)
#set initial values to average greyscale values
U <- matrix(sqrt(mean(yn)/d), nrow = nrow(yn), ncol = d)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
U <- matrix(sqrt(mean(yn)/d), nrow = nrow(yn), ncol = d)
V <- matrix(sqrt(mean(yn)/d), nrow = ncol(yn), ncol = d)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
#update U rows
for(i in 1:nrow(U)){
U[i,] <- U[i,] - eta * grad_u(X, V, U[i,], i, sigma2, sigma2_u)
}
#update V rows
for(j in 1:nrow(V)){
V[j,] <- V[j,] - eta * grad_v(X, V[j,], U, j, sigma2, sigma2_v)
}
#update convergence criterion
Xhat.new <- tcrossprod(U, V)
par(mfrow = c(3, 1))
hist(Xhat.new, main = paste("Iter:", iter)); hist(U, main = "U"); hist(V, main = "V")
conv.crit <- ifelse(iter > max.iters || norm(Xhat - Xhat.new, type = "F") < 1e-10, TRUE, FALSE)
#update parameters
Xhat <- Xhat.new
iter <- iter +1
print(iter)
